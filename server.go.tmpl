package {{ .PkgName }}

import (
	_ "embed"
	"errors"
	"fmt"
	"html/template"
	"io"
	"net/http"
	"os"
	"path/filepath"

	"github.com/mikerybka/brass"
	"github.com/mikerybka/util"
)

type Server struct {
	DataDir string
}

func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	mux := http.NewServeMux()
	mux.HandleFunc("GET /{$}", s.landingPage)
	mux.HandleFunc("POST /{$}", s.createOrg)
	mux.HandleFunc("GET /favicon.ico", s.favicon)
	mux.HandleFunc("/login", s.login)
	mux.HandleFunc("/logout", s.logout)
	mux.HandleFunc("/join", s.join)
	mux.HandleFunc("GET /{orgID}", s.getOrg)
	mux.HandleFunc("/{orgID}/new", s.newObj)
	mux.HandleFunc("GET /{orgID}/{objID}/", s.getObj)
	mux.HandleFunc("GET /obj.js", s.getObjJS)
	mux.HandleFunc("PUT /{orgID}/{objID}", s.setObj)
	mux.ServeHTTP(w, r)
}

func (s *Server) getOrg(w http.ResponseWriter, r *http.Request) {
	ok, err := s.auth().Allowed(r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if !ok {
		http.Error(w, "forbidden", http.StatusForbidden)
		return
	}
	entries, err := os.ReadDir(filepath.Join(s.DataDir, "orgs", r.PathValue("orgID"), "objects"))
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	fmt.Fprintf(w, "<ul>")
	for _, e := range entries {
		fmt.Fprintf(w, "<li><a href=\"%s\">%s</a></lil>", filepath.Join(r.URL.Path, e.Name()), e.Name())
	}
	fmt.Fprintf(w, "<li><a href=\"%s/new\">New</a></lil></ul>", r.URL.Path)
}

func (s *Server) newObj(w http.ResponseWriter, r *http.Request) {
	ok, err := s.auth().Allowed(r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if !ok {
		http.Error(w, "forbidden", http.StatusForbidden)
		return
	}
	f := &util.SimpleForm{
		TitleText: "New",
		Fields: []util.Field{
			{
				Name: util.NewName("ID"),
			},
		},
		SubmitText: "Create",
	}
	f.HandlePOST = func(w http.ResponseWriter, r *http.Request) {
		objID := r.FormValue("id")
		path := filepath.Join(s.DataDir, "orgs", r.PathValue("orgID"), objID, "objects")
		_, err := os.Stat(path)
		if err != nil {
			if errors.Is(err, os.ErrNotExist) {
				err = os.WriteFile(path, []byte("{}"), os.ModePerm)
				if err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
				return
			}
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		f.Error = fmt.Errorf("ID %s already in use", objID)
		f.ServeHTTP(w, r)
		return
	}
	f.ServeHTTP(w, r)
}

func (s *Server) getObj(w http.ResponseWriter, r *http.Request) {
	ok, err := s.auth().Allowed(r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if !ok {
		http.Error(w, "forbidden", http.StatusForbidden)
		return
	}
	path := filepath.Join(s.DataDir, "orgs", r.PathValue("orgID"), "objects", r.PathValue("objID"))
	b, err := os.ReadFile(path)
	if err != nil {
		if errors.Is(err, os.ErrNotExist) {
			http.NotFound(w, r)
			return
		}
	}
	if util.Accept(r, "application/json") {
		w.Write(b)
		return
	}
	w.Write(objectPage)
}

//go:embed obj.js
var objJS []byte

func (s *Server) getObjJS(w http.ResponseWriter, r *http.Request) {
	w.Write(objJS)
}
func (s *Server) setObj(w http.ResponseWriter, r *http.Request) {
	ok, err := s.auth().Allowed(r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if !ok {
		http.Error(w, "forbidden", http.StatusForbidden)
		return
	}
	b, err := io.ReadAll(r.Body)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	path := filepath.Join(s.DataDir, "orgs", r.PathValue("orgID"), "objects", r.PathValue("objID"))
	err = os.WriteFile(path, b, os.ModePerm)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}
func (s *Server) auth() *brass.Auth {
	return &brass.Auth{
		DataDir: s.DataDir,
	}
}

//go:embed obj.html
var objectPage []byte

//go:embed root.html
var landingPageTemplate string

func (s *Server) landingPage(w http.ResponseWriter, r *http.Request) {
	template.Must(template.New("landing_page").Parse(landingPageTemplate)).Execute(w, struct {
		UserID string
	}{})
}
func (s *Server) createOrg(w http.ResponseWriter, r *http.Request) {
}
func (s *Server) favicon(w http.ResponseWriter, r *http.Request) {
	w.Write(favicon)
}
func (s *Server) login(w http.ResponseWriter, r *http.Request) {
	form := &util.SimpleForm{
		TitleText: "Login",
		Fields: []util.Field{
			{
				Name: util.NewName("Username"),
			},
			{
				Name: util.NewName("Password"),
				Type: "password",
			},
		},
		SubmitText: "Enter",
	}
	form.HandlePOST = func(w http.ResponseWriter, r *http.Request) {
		username := r.FormValue("username")
		token, err := s.auth().Login(
			username,
			r.FormValue("password"),
		)
		if err != nil {
			form.Error = err
			form.ServeHTTP(w, r)
			return
		}
		http.SetCookie(w, &http.Cookie{
			Name:  "UserID",
			Value: username,
		})
		http.SetCookie(w, &http.Cookie{
			Name:  "SessionID",
			Value: token,
		})
		http.Redirect(w, r, "/"+username, http.StatusSeeOther)
	}
	form.ServeHTTP(w, r)
}
func (s *Server) logout(w http.ResponseWriter, r *http.Request) {
	form := &util.SimpleForm{
		SubmitText: "Logout",
	}
	form.HandlePOST = func(w http.ResponseWriter, r *http.Request) {
		http.SetCookie(w, &http.Cookie{
			Name:  "UserID",
			Value: "",
		})
		http.SetCookie(w, &http.Cookie{
			Name:  "SessionID",
			Value: "",
		})
		http.Redirect(w, r, "/", http.StatusSeeOther)
	}
	form.ServeHTTP(w, r)
}
func (s *Server) join(w http.ResponseWriter, r *http.Request) {
	form := &util.SimpleForm{
		TitleText: "Join",
		Fields: []util.Field{
			{
				Name: util.NewName("Username"),
			},
			{
				Name: util.NewName("Password"),
				Type: "password",
			},
			{
				Name: util.NewName("Confirm Password"),
				Type: "password",
			},
		},
		SubmitText: "Enter",
	}
	form.HandlePOST = func(w http.ResponseWriter, r *http.Request) {
		username := r.FormValue("username")
		token, err := s.auth().Join(
			username,
			r.FormValue("password"),
			r.FormValue("confirm-password"),
		)
		if err != nil {
			form.Error = err
			form.ServeHTTP(w, r)
			return
		}
		http.SetCookie(w, &http.Cookie{
			Name:  "UserID",
			Value: username,
		})
		http.SetCookie(w, &http.Cookie{
			Name:  "SessionID",
			Value: token,
		})
		http.Redirect(w, r, "/"+username, http.StatusSeeOther)
	}
	form.ServeHTTP(w, r)
}
